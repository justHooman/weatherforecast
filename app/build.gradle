plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id "kotlin-parcelize"
    id 'kotlin-kapt'
    id "dagger.hilt.android.plugin"
}

apply from: "${rootDir}/gradle/props.ext.gradle"

android {
    compileSdk 32
    buildToolsVersion "32.1.0-rc1"

    defaultConfig {
        applicationId "au.com.nab.justhooman.weatherforecast"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField 'String', "OPEN_WEATHER_MAP_BASE_URL", '"https://api.openweathermap.org"'
        buildConfigField 'String', "OPEN_WEATHER_MAP_APPID", "\"${getProp('OPEN_WEATHER_MAP_APPID')}\""
    }

    def debugKeyStore = getPropOrDefault(
            "WEATHER_APP_ANDROID_DEBUG_KEYSTORE",
            "${getProp("HOME")}/.android/debug.keystore"
    )
    def debugKeyPassFile = getPropOrDefault("WEATHER_APP_ANDROID_DEBUG_KEY_PASS", "$rootDir/app/.keys/debug/keys-pass")

    signingConfigs {
        debug {
            def keysPass = file(debugKeyPassFile).readLines()
            storeFile file(debugKeyStore)
            storePassword keysPass.get(0)
            keyAlias keysPass.get(1)
            keyPassword keysPass.get(2)
        }
        release {
            // Caution! DO NOT commit raw value of release key to git
            def keyFile = getProp("WEATHER_APP_ANDROID_RELEASE_KEY_STORE")
            def keyPassFile = getProp("WEATHER_APP_ANDROID_RELEASE_PASS_FILE")
            def isCI = getProp("CI")
            if (keyFile == "" || keyPassFile == "") {
                if (isCI == '1') {
                    keyFile = debugKeyStore
                    keyPassFile = debugKeyPassFile
                } else {
                    throw new GradleException(
                            "No value for env key: 'WEATHER_APP_ANDROID_RELEASE_KEY_STORE' " +
                                    "or 'WEATHER_APP_ANDROID_RELEASE_PASS_FILE'." +
                                    "\nFor local build and use debug key, set env key 'CI' to 1"
                    )
                }
            }
            def keysPass = file(keyPassFile).readLines()
            storeFile file(keyFile)
            storePassword keysPass.get(0)
            keyAlias keysPass.get(1)
            keyPassword keysPass.get(2)
        }
    }

    buildTypes {
        debug {
            debuggable true
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            shrinkResources true

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation("com.google.code.gson:gson:${libs.versions.gson}")

    implementation "com.squareup.retrofit2:retrofit:${libs.versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${libs.versions.retrofit}"
    implementation("com.squareup.okhttp3:logging-interceptor:${libs.versions.retrofit_logging}")

    // ## LifeCycle
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${libs.versions.lifecycle}"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${libs.versions.lifecycle}"
    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:${libs.versions.lifecycle}"
    // Annotation processor
    kapt "androidx.lifecycle:lifecycle-compiler:${libs.versions.lifecycle}"
    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation "androidx.lifecycle:lifecycle-process:${libs.versions.lifecycle}"
    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:${libs.versions.arch}"
    // optional - Test helpers for Lifecycle runtime
    testImplementation "androidx.lifecycle:lifecycle-runtime-testing:${libs.versions.lifecycle}"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${libs.versions.kotlin_coroutines}"

    // Hilt
    implementation "com.google.dagger:hilt-android:${libs.versions.hilt}"
    kapt "com.google.dagger:hilt-compiler:${libs.versions.hilt}"
    kaptAndroidTest "com.google.dagger:hilt-compiler:${libs.versions.hilt}"
    androidTestImplementation "com.google.dagger:hilt-android-testing:${libs.versions.hilt}"

    implementation "androidx.core:core-ktx:${libs.versions.androidx.core}"
    implementation "androidx.appcompat:appcompat:${libs.versions.androidx.appcompat}"
    implementation "com.google.android.material:material:${libs.versions.androidx.material}"
    implementation "androidx.constraintlayout:constraintlayout:${libs.versions.androidx.constraint}"
    implementation "androidx.navigation:navigation-fragment-ktx:${libs.versions.androidx.navigation}"
    implementation "androidx.navigation:navigation-ui-ktx:${libs.versions.androidx.navigation}"
    testImplementation "junit:junit:${libs.versions.junit}"
    androidTestImplementation "androidx.test.ext:junit:${libs.versions.androidx.junit}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${libs.versions.androidx.expresso}"
}