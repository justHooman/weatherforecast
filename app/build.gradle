plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

apply from: "${rootDir}/gradle/props.ext.gradle"

android {
    compileSdk 32

    defaultConfig {
        applicationId "au.com.nab.justhooman.weatherforecast"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    def debugKeyStore = getPropOrDefault(
            "WEATHER_APP_ANDROID_DEBUG_KEYSTORE",
            "${getProp("HOME")}/.android/debug.keystore"
    )
    def debugKeyPassFile = getPropOrDefault("WEATHER_APP_ANDROID_DEBUG_KEY_PASS", "$rootDir/app/.keys/debug/keys-pass")

    signingConfigs {
        debug {
            def keysPass = file(debugKeyPassFile).readLines()
            storeFile file(debugKeyStore)
            storePassword keysPass.get(0)
            keyAlias keysPass.get(1)
            keyPassword keysPass.get(2)
        }
        release {
            // Caution! DO NOT commit raw value of release key to git
            def keyFile = getProp("WEATHER_APP_ANDROID_RELEASE_KEY_STORE")
            def keyPassFile = getProp("WEATHER_APP_ANDROID_RELEASE_PASS_FILE")
            def isCI = getProp("CI")
            if (keyFile == "" || keyPassFile == "") {
                if (isCI == '1') {
                    keyFile = debugKeyStore
                    keyPassFile = debugKeyPassFile
                } else {
                    throw new GradleException(
                            "No value for env key: 'WEATHER_APP_ANDROID_RELEASE_KEY_STORE' " +
                                    "or 'WEATHER_APP_ANDROID_RELEASE_PASS_FILE'." +
                                    "\nFor local build and use debug key, set env key 'CI' to 1"
                    )
                }
            }
            def keysPass = file(keyPassFile).readLines()
            storeFile file(keyFile)
            storePassword keysPass.get(0)
            keyAlias keysPass.get(1)
            keyPassword keysPass.get(2)
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation("com.google.code.gson:gson:2.9.1")

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.2'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}